<?xml version="1.0" encoding="UTF-8" ?>
<!--
 Licensed to the Apache Software Foundation (ASF) under one or more
 contributor license agreements.  See the NOTICE file distributed with
 this work for additional information regarding copyright ownership.
 The ASF licenses this file to You under the Apache License, Version 2.0
 (the "License"); you may not use this file except in compliance with
 the License.  You may obtain a copy of the License at

     http://www.apache.org/licenses/LICENSE-2.0

 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.
-->

<!--
     For more details about configurations options that may appear in
     this file, see http://wiki.apache.org/solr/SolrConfigXml.
-->
<config>
  <!-- In all configuration below, a prefix of "solr." for class names
       is an alias that causes solr to search appropriate packages,
       including org.apache.solr.(search|update|request|core|analysis)

       You may also specify a fully qualified Java classname if you
       have your own custom plugins.
    -->

  <!-- Controls what version of Lucene various components of Solr
       adhere to.  Generally, you want to use the latest version to
       get all bug fixes and improvements. It is highly recommended
       that you fully re-index after changing this setting as it can
       affect both how text is indexed and queried.
  -->
  <luceneMatchVersion>9.4</luceneMatchVersion>

  <!-- <lib/> directives can be used to instruct Solr to load any Jars
       identified and use them to resolve any "plugins" specified in
       your solrconfig.xml or schema.xml (ie: Analyzers, Request
       Handlers, etc...).

       All directories and paths are resolved relative to the
       instanceDir.

       Please note that <lib/> directives are processed in the order
       that they appear in your solrconfig.xml file, and are "stacked"
       on top of each other when building a ClassLoader - so if you have
       plugin jars with dependencies on other jars, the "lower level"
       dependency jars should be loaded first.

       If a "./lib" directory exists in your instanceDir, all files
       found in it are included as if you had used the following
       syntax...

              <lib dir="./lib" />
    -->

  <!-- A 'dir' option by itself adds any files found in the directory
       to the classpath, this is useful for including all jars in a
       directory.

       When a 'regex' is specified in addition to a 'dir', only the
       files in that directory which completely match the regex
       (anchored on both ends) will be included.

       If a 'dir' option (with or without a regex) is used and nothing
       is found that matches, a warning will be logged.

       The examples below can be used to load some solr-contribs along
       with their external dependencies.
    -->
  <lib dir="${solr.install.dir:../../../..}/modules/analysis-extras/lib/" regex="icu4j-\d.*\.jar" />
  <lib dir="${solr.install.dir:../../../..}/modules/analysis-extras/lib/" regex="lucene-analysis-icu-\d.*\.jar" />
  <lib dir="${solr.install.dir:../../../..}/modules/analysis-extras/lib/" regex="solr-analysis-extras-\d.*\.jar" />

  <!-- Data Directory

       Used to specify an alternate directory to hold all index data
       other than the default ./data under the Solr home.  If
       replication is in use, this should match the replication
       configuration.
    -->
  <dataDir>${solr.data.dir:}</dataDir>


  <!-- The DirectoryFactory to use for indexes.

       solr.StandardDirectoryFactory is filesystem
       based and tries to pick the best implementation for the current
       JVM and platform.  solr.NRTCachingDirectoryFactory, the default,
       wraps solr.StandardDirectoryFactory and caches small files in memory
       for better NRT performance.

       One can force a particular implementation via solr.MMapDirectoryFactory,
       solr.NIOFSDirectoryFactory, or solr.SimpleFSDirectoryFactory.

       solr.RAMDirectoryFactory is memory based and not persistent.
    -->
  <directoryFactory name="DirectoryFactory"
                    class="${solr.directoryFactory:solr.NRTCachingDirectoryFactory}"/>

  <!-- The CodecFactory for defining the format of the inverted index.
       The default implementation is SchemaCodecFactory, which is the official Lucene
       index format, but hooks into the schema to provide per-field customization of
       the postings lists and per-document values in the fieldType element
       (postingsFormat/docValuesFormat). Note that most of the alternative implementations
       are experimental, so if you choose to customize the index format, it's a good
       idea to convert back to the official format e.g. via IndexWriter.addIndexes(IndexReader)
       before upgrading to a newer version to avoid unnecessary reindexing.
  -->
  <codecFactory class="solr.SchemaCodecFactory"/>

  <!-- To enable dynamic schema REST APIs, use the following for <schemaFactory>:
  
       <schemaFactory class="ManagedIndexSchemaFactory">
         <bool name="mutable">true</bool>
         <str name="managedSchemaResourceName">managed-schema</str>
       </schemaFactory>
       
       When ManagedIndexSchemaFactory is specified, Solr will load the schema from
       he resource named in 'managedSchemaResourceName', rather than from schema.xml.
       Note that the managed schema resource CANNOT be named schema.xml.  If the managed
       schema does not exist, Solr will create it after reading schema.xml, then rename
       'schema.xml' to 'schema.xml.bak'. 
       
       Do NOT hand edit the managed schema - external modifications will be ignored and
       overwritten as a result of schema modification REST API calls.

       When ManagedIndexSchemaFactory is specified with mutable = true, schema
       modification REST API calls will be allowed; otherwise, error responses will be
       sent back for these requests. 
  -->
  <schemaFactory class="ClassicIndexSchemaFactory"/>

  <!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
       Index Config - These settings control low-level behavior of indexing
       Most example settings here show the default value, but are commented
       out, to more easily see where customizations have been made.

       Note: This replaces <indexDefaults> and <mainIndex> from older versions
       ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ -->
  <indexConfig>
    <!-- maxFieldLength was removed in 4.0. To get similar behavior, include a
         LimitTokenCountFilterFactory in your fieldType definition. E.g.
     <filter class="solr.LimitTokenCountFilterFactory" maxTokenCount="10000"/>
    -->
    <!-- Maximum time to wait for a write lock (ms) for an IndexWriter. Default: 1000 -->
    <!-- <writeLockTimeout>1000</writeLockTimeout>  -->

    <!-- Expert: Enabling compound file will use less files for the index,
         using fewer file descriptors on the expense of performance decrease.
         Default in Lucene is "true". Default in Solr is "false" (since 3.6) -->
    <!-- <useCompoundFile>false</useCompoundFile> -->

    <!-- ramBufferSizeMB sets the amount of RAM that may be used by Lucene
         indexing for buffering added documents and deletions before they are
         flushed to the Directory.
         maxBufferedDocs sets a limit on the number of documents buffered
         before flushing.
         If both ramBufferSizeMB and maxBufferedDocs is set, then
         Lucene will flush based on whichever limit is hit first.  -->
    <!-- <ramBufferSizeMB>100</ramBufferSizeMB> -->
    <!-- <maxBufferedDocs>1000</maxBufferedDocs> -->

    <!-- Expert: Merge Policy
         The Merge Policy in Lucene controls how merging of segments is done.
         The default since Solr/Lucene 3.3 is TieredMergePolicy.
         The default since Lucene 2.3 was the LogByteSizeMergePolicy,
         Even older versions of Lucene used LogDocMergePolicy.
      -->
    <!--
        <mergePolicyFactory class="solr.TieredMergePolicyFactory">
          <int name="maxMergeAtOnce">10</int>
          <int name="segmentsPerTier">10</int>
        </mergePolicyFactory>
     -->

    <!-- Expert: Merge Scheduler
         The Merge Scheduler in Lucene controls how merges are
         performed.  The ConcurrentMergeScheduler (Lucene 2.3 default)
         can perform merges in the background using separate threads.
         The SerialMergeScheduler (Lucene 2.2 default) does not.
     -->
    <!--
       <mergeScheduler class="org.apache.lucene.index.ConcurrentMergeScheduler"/>
       -->

    <!-- LockFactory

         This option specifies which Lucene LockFactory implementation
         to use.

         single = SingleInstanceLockFactory - suggested for a
                  read-only index or when there is no possibility of
                  another process trying to modify the index.
         native = NativeFSLockFactory - uses OS native file locking.
                  Do not use when multiple solr webapps in the same
                  JVM are attempting to share a single index.
         simple = SimpleFSLockFactory  - uses a plain file for locking

         Defaults: 'native' is default for Solr3.6 and later, otherwise
                   'simple' is the default

         More details on the nuances of each LockFactory...
         http://wiki.apache.org/lucene-java/AvailableLockFactories
    -->
    <lockType>${solr.lock.type:native}</lockType>

    <!-- Commit Deletion Policy
         Custom deletion policies can be specified here. The class must
         implement org.apache.lucene.index.IndexDeletionPolicy.

         The default Solr IndexDeletionPolicy implementation supports
         deleting index commit points on number of commits, age of
         commit point and optimized status.

         The latest commit point should always be preserved regardless
         of the criteria.
    -->
    <!--
    <deletionPolicy class="solr.SolrDeletionPolicy">
    -->
    <!-- The number of commit points to be kept -->
    <!-- <str name="maxCommitsToKeep">1</str> -->
    <!-- The number of optimized commit points to be kept -->
    <!-- <str name="maxOptimizedCommitsToKeep">0</str> -->
    <!--
        Delete all commit points once they have reached the given age.
        Supports DateMathParser syntax e.g.
      -->
    <!--
       <str name="maxCommitAge">30MINUTES</str>
       <str name="maxCommitAge">1DAY</str>
    -->
    <!--
    </deletionPolicy>
    -->

    <!-- Lucene Infostream

         To aid in advanced debugging, Lucene provides an "InfoStream"
         of detailed information when indexing.

         Setting The value to true will instruct the underlying Lucene
         IndexWriter to write its debugging info the specified file
      -->
    <!-- <infoStream file="INFOSTREAM.txt">false</infoStream> -->
  </indexConfig>

  <!-- The default high-performance update handler -->
  <updateHandler class="solr.DirectUpdateHandler2">

    <!-- Enables a transaction log, used for real-time get, durability, and
         and solr cloud replica recovery.  The log can grow as big as
         uncommitted changes to the index, so use of a hard autoCommit
         is recommended (see below).
         "dir" - the target directory for transaction logs, defaults to the
                solr data directory.  -->
    <updateLog>
      <str name="dir">${solr.ulog.dir:}</str>
    </updateLog>

    <!-- AutoCommit

         Perform a hard commit automatically under certain conditions.
         Instead of enabling autoCommit, consider using "commitWithin"
         when adding documents.

         http://wiki.apache.org/solr/UpdateXmlMessages

         maxDocs - Maximum number of documents to add since the last
                   commit before automatically triggering a new commit.

         maxTime - Maximum amount of time in ms that is allowed to pass
                   since a document was added before automatically
                   triggering a new commit.
         openSearcher - if false, the commit causes recent index changes
           to be flushed to stable storage, but does not cause a new
           searcher to be opened to make those changes visible.

         If the updateLog is enabled, then it's highly recommended to
         have some sort of hard autoCommit to limit the log size.
      -->
    <autoCommit>
      <maxTime>15000</maxTime>
      <openSearcher>false</openSearcher>
    </autoCommit>

    <!-- softAutoCommit is like autoCommit except it causes a
         'soft' commit which only ensures that changes are visible
         but does not ensure that data is synced to disk.  This is
         faster and more near-realtime friendly than a hard commit.
      -->
    <!--
      <autoSoftCommit>
        <maxTime>1000</maxTime>
      </autoSoftCommit>
     -->

    <!-- Update Related Event Listeners

         Various IndexWriter related events can trigger Listeners to
         take actions.

         postCommit - fired after every commit or optimize command
         postOptimize - fired after every optimize command
      -->

  </updateHandler>

  <!-- IndexReaderFactory

       Use the following format to specify a custom IndexReaderFactory,
       which allows for alternate IndexReader implementations.

       ** Experimental Feature **

       Please note - Using a custom IndexReaderFactory may prevent
       certain other features from working. The API to
       IndexReaderFactory may change without warning or may even be
       removed from future releases if the problems cannot be
       resolved.


       ** Features that may not work with custom IndexReaderFactory **

       The ReplicationHandler assumes a disk-resident index. Using a
       custom IndexReader implementation may cause incompatibility
       with ReplicationHandler and may cause replication to not work
       correctly. See SOLR-1366 for details.

    -->
  <!--
  <indexReaderFactory name="IndexReaderFactory" class="package.class">
    <str name="someArg">Some Value</str>
  </indexReaderFactory >
  -->

  <!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
       Query section - these settings control query time things like caches
       ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ -->
  <query>
    <!-- Max Boolean Clauses

         Maximum number of clauses in each BooleanQuery,  an exception
         is thrown if exceeded.

         ** WARNING **

         This option actually modifies a global Lucene property that
         will affect all SolrCores.  If multiple solrconfig.xml files
         disagree on this property, the value at any given moment will
         be based on the last SolrCore to be initialized.

      -->
    <maxBooleanClauses>${solr.max.booleanClauses:1024}</maxBooleanClauses>


    <!-- Solr Internal Query Caches

         There are four implementations of cache available for Solr:
         LRUCache, based on a synchronized LinkedHashMap, 
         LFUCache and FastLRUCache, based on a ConcurrentHashMap, and CaffeineCache -
         a modern and robust cache implementation. Note that in Solr 9.0
         only CaffeineCache will be available, other implementations are now
         deprecated.

         FastLRUCache has faster gets and slower puts in single
         threaded operation and thus is generally faster than LRUCache
         when the hit ratio of the cache is high (> 75%), and may be
         faster under other scenarios on multi-cpu systems.
    -->

    <!-- Filter Cache

         Cache used by SolrIndexSearcher for filters (DocSets),
         unordered sets of *all* documents that match a query.  When a
         new searcher is opened, its caches may be prepopulated or
         "autowarmed" using data from caches in the old searcher.
         autowarmCount is the number of items to prepopulate.  For
         LRUCache, the autowarmed items will be the most recently
         accessed items.

         Parameters:
           class - the SolrCache implementation LRUCache or
               (LRUCache or FastLRUCache)
           size - the maximum number of entries in the cache
           initialSize - the initial capacity (number of entries) of
               the cache.  (see java.util.HashMap)
           autowarmCount - the number of entries to prepopulate from
               and old cache.
      -->
    <filterCache class="solr.CaffeineCache"
                 size="512"
                 initialSize="512"
                 autowarmCount="128"/>

    <!-- Query Result Cache

         Caches results of searches - ordered lists of document ids
         (DocList) based on a query, a sort, and the range of documents requested.
         Additional supported parameter by LRUCache:
            maxRamMB - the maximum amount of RAM (in MB) that this cache is allowed
                       to occupy
      -->
    <queryResultCache class="solr.CaffeineCache"
                      size="512"
                      initialSize="512"
                      autowarmCount="128"/>

    <!-- Document Cache

         Caches Lucene Document objects (the stored fields for each
         document).  Since Lucene internal document ids are transient,
         this cache will not be autowarmed.
      -->
    <documentCache class="solr.CaffeineCache"
                   size="512"
                   initialSize="512"
                   autowarmCount="0"/>

    <!-- Field Value Cache

         Cache used to hold field values that are quickly accessible
         by document id.  The fieldValueCache is created by default
         even if not configured here.
      -->
    <!--
       <fieldValueCache size="512"
                        autowarmCount="128"
                        showItems="32" />
      -->

    <!-- Custom Cache

         Example of a generic cache.  These caches may be accessed by
         name through SolrIndexSearcher.getCache(),cacheLookup(), and
         cacheInsert().  The purpose is to enable easy caching of
         user/application level data.  The regenerator argument should
         be specified as an implementation of solr.CacheRegenerator
         if autowarming is desired.
      -->
    <!--
       <cache name="myUserCache"
              size="4096"
              initialSize="1024"
              autowarmCount="1024"
              regenerator="com.mycompany.MyRegenerator"
              />
      -->


    <!-- Lazy Field Loading

         If true, stored fields that are not requested will be loaded
         lazily.  This can result in a significant speed improvement
         if the usual case is to not load all stored fields,
         especially if the skipped fields are large compressed text
         fields.
    -->
    <enableLazyFieldLoading>true</enableLazyFieldLoading>

    <!-- Use Filter For Sorted Query

         A possible optimization that attempts to use a filter to
         satisfy a search.  If the requested sort does not include
         score, then the filterCache will be checked for a filter
         matching the query. If found, the filter will be used as the
         source of document ids, and then the sort will be applied to
         that.

         For most situations, this will not be useful unless you
         frequently get the same search repeatedly with different sort
         options, and none of them ever use "score"
      -->
    <!--
       <useFilterForSortedQuery>true</useFilterForSortedQuery>
      -->

    <!-- Result Window Size

         An optimization for use with the queryResultCache.  When a search
         is requested, a superset of the requested number of document ids
         are collected.  For example, if a search for a particular query
         requests matching documents 10 through 19, and queryWindowSize is 50,
         then documents 0 through 49 will be collected and cached.  Any further
         requests in that range can be satisfied via the cache.
      -->
    <queryResultWindowSize>20</queryResultWindowSize>

    <!-- Maximum number of documents to cache for any entry in the
         queryResultCache.
      -->
    <queryResultMaxDocsCached>200</queryResultMaxDocsCached>

    <!-- Query Related Event Listeners

         Various IndexSearcher related events can trigger Listeners to
         take actions.

         newSearcher - fired whenever a new searcher is being prepared
         and there is a current searcher handling requests (aka
         registered).  It can be used to prime certain caches to
         prevent long request times for certain requests.

         firstSearcher - fired whenever a new searcher is being
         prepared but there is no current registered searcher to handle
         requests or to gain autowarming data from.


      -->
    <!-- QuerySenderListener takes an array of NamedList and executes a
         local query request for each NamedList in sequence.
      -->
    <listener event="newSearcher" class="solr.QuerySenderListener">
      <arr name="queries">
       <lst>
          <str name="qt">catalog-search</str>
          <str name="wt">json</str>
          <str name="rows">50</str>
          <str name="fq">suppressed:false</str>
          <str name="facet">true</str>
          <str name="stats">true</str>
          <str name="stats.field">publication_year_range_facet</str>
          <str name="facet.query">date_added:[NOW-7DAYS/DAY TO NOW/DAY]</str>
          <str name="facet.query">date_added:[NOW-14DAYS/DAY TO NOW/DAY]</str>
          <str name="facet.query">date_added:[NOW-21DAYS/DAY TO NOW/DAY]</str>
          <str name="facet.query">date_added:[NOW-1MONTH/DAY TO NOW/DAY]</str>
          <str name="facet.query">date_added:[NOW-2MONTHS/DAY TO NOW/DAY]</str>
          <str name="facet.query">date_added:[NOW-3MONTHS/DAY TO NOW/DAY]</str>
          <str name="facet.query">date_added:[NOW-6MONTHS/DAY TO NOW/DAY]</str>
          <str name="facet.field">access_facet</str>
          <str name="facet.field">resource_type_facet</str>
          <str name="facet.field">media_type_facet</str>
          <str name="facet.field">collection_facet</str>
          <str name="facet.field">building_facet</str>
          <str name="facet.field">shelf_facet</str>
          <str name="facet.field">publication_year_range_facet</str>
          <str name="facet.field">languages</str>
          <str name="facet.field">author_contributor_facet</str>
          <str name="facet.field">meeting_facet</str>
          <str name="facet.field">title_series_facet</str>
          <str name="facet.field">genre_facet</str>
          <str name="facet.field">topic_facet</str>
          <str name="facet.field">region_facet</str>
          <str name="facet.field">era_facet</str>
          <str name="facet.field">games_duration_facet</str>
          <str name="facet.field">games_players_facet</str>
          <str name="facet.field">games_ages_facet</str>
          <str name="facet.field">subject_heading_facet</str>
          <str name="facet.field">genre_heading_facet</str>
          <str name="f.building_facet.facet.sort">index</str>
          <str name="f.access_facet.facet.sort">index</str>
          <str name="f.languages.facet.limit">11</str>
          <str name="f.author_contributor_facet.facet.limit">11</str>
          <str name="f.title_series_facet.facet.limit">11</str>
          <str name="f.shelf_facet.facet.limit">11</str>
          <str name="f.resource_type_facet.facet.sort">index</str>
          <str name="f.collection_facet.facet.sort">index</str>
          <str name="f.topic_facet.facet.limit">11</str>
          <str name="f.region_facet.facet.limit">11</str>
          <str name="f.games_duration_facet.facet.sort">index</str>
          <str name="f.era_facet.facet.limit">11</str>
          <str name="f.games_players_facet.facet.sort">index</str>
          <str name="f.shelf_facet.facet.sort">index</str>
          <str name="f.meeting_facet.facet.limit">11</str>
          <str name="f.games_ages_facet.facet.sort">index</str>
          <str name="f.media_type_facet.facet.limit">11</str>
          <str name="f.genre_facet.facet.limit">11</str>
          <str name="sort">score desc, title_sort asc</str>
          <str name="q"></str>
        </lst>
        <lst>
          <str name="qt">catalog-search</str>
          <str name="wt">json</str>
          <str name="rows">0</str>
          <str name="fq">suppressed:false</str>
          <str name="facet">true</str>
          <str name="facet.query">date_added:[NOW-7DAYS/DAY TO NOW/DAY]</str>
          <str name="facet.query">date_added:[NOW-14DAYS/DAY TO NOW/DAY]</str>
          <str name="facet.query">date_added:[NOW-21DAYS/DAY TO NOW/DAY]</str>
          <str name="facet.query">date_added:[NOW-1MONTH/DAY TO NOW/DAY]</str>
          <str name="facet.query">date_added:[NOW-2MONTHS/DAY TO NOW/DAY]</str>
          <str name="facet.query">date_added:[NOW-3MONTHS/DAY TO NOW/DAY]</str>
          <str name="facet.query">date_added:[NOW-6MONTHS/DAY TO NOW/DAY]</str>
          <str name="facet.query">publication_year_range_facet:[100 TO 199]</str>
          <str name="facet.query">publication_year_range_facet:[200 TO 399]</str>
          <str name="facet.query">publication_year_range_facet:[400 TO 599]</str>
          <str name="facet.query">publication_year_range_facet:[600 TO 799]</str>
          <str name="facet.query">publication_year_range_facet:[800 TO 999]</str>
          <str name="facet.query">publication_year_range_facet:[1000 TO 1199]</str>
          <str name="facet.query">publication_year_range_facet:[1200 TO 1399]</str>
          <str name="facet.query">publication_year_range_facet:[1400 TO 1599]</str>
          <str name="facet.query">publication_year_range_facet:[1600 TO 1799]</str>
          <str name="facet.query">publication_year_range_facet:[1800 TO 1999]</str>
          <str name="facet.query">publication_year_range_facet:[2000 TO 2026]</str>
          <str name="f.access_facet.facet.sort">index</str>
          <str name="f.languages.facet.limit">11</str>
          <str name="f.building_facet.facet.sort">index</str>
          <str name="f.author_contributor_facet.facet.limit">11</str>
          <str name="f.title_series_facet.facet.limit">11</str>
          <str name="f.shelf_facet.facet.limit">11</str>
          <str name="f.resource_type_facet.facet.sort">index</str>
          <str name="f.collection_facet.facet.sort">index</str>
          <str name="f.topic_facet.facet.limit">11</str>
          <str name="f.region_facet.facet.limit">11</str>
          <str name="f.games_duration_facet.facet.sort">index</str>
          <str name="f.era_facet.facet.limit">11</str>
          <str name="f.games_players_facet.facet.sort">index</str>
          <str name="f.shelf_facet.facet.sort">index</str>
          <str name="f.meeting_facet.facet.limit">11</str>
          <str name="f.games_ages_facet.facet.sort">index</str>
          <str name="f.media_type_facet.facet.limit">11</str>
          <str name="f.genre_facet.facet.limit">11</str>
          <str name="sort">score desc, title_sort asc</str>
          <str name="q"></str>
        </lst>
      </arr>
    </listener>
    <listener event="firstSearcher" class="solr.QuerySenderListener">
      <arr name="queries">
       <lst>
          <str name="qt">catalog-search</str>
          <str name="wt">json</str>
          <str name="rows">50</str>
          <str name="fq">suppressed:false</str>
          <str name="facet">true</str>
          <str name="stats">true</str>
          <str name="stats.field">publication_year_range_facet</str>
          <str name="facet.query">date_added:[NOW-7DAYS/DAY TO NOW/DAY]</str>
          <str name="facet.query">date_added:[NOW-14DAYS/DAY TO NOW/DAY]</str>
          <str name="facet.query">date_added:[NOW-21DAYS/DAY TO NOW/DAY]</str>
          <str name="facet.query">date_added:[NOW-1MONTH/DAY TO NOW/DAY]</str>
          <str name="facet.query">date_added:[NOW-2MONTHS/DAY TO NOW/DAY]</str>
          <str name="facet.query">date_added:[NOW-3MONTHS/DAY TO NOW/DAY]</str>
          <str name="facet.query">date_added:[NOW-6MONTHS/DAY TO NOW/DAY]</str>
          <str name="facet.field">access_facet</str>
          <str name="facet.field">resource_type_facet</str>
          <str name="facet.field">media_type_facet</str>
          <str name="facet.field">collection_facet</str>
          <str name="facet.field">building_facet</str>
          <str name="facet.field">shelf_facet</str>
          <str name="facet.field">publication_year_range_facet</str>
          <str name="facet.field">languages</str>
          <str name="facet.field">author_contributor_facet</str>
          <str name="facet.field">meeting_facet</str>
          <str name="facet.field">title_series_facet</str>
          <str name="facet.field">genre_facet</str>
          <str name="facet.field">topic_facet</str>
          <str name="facet.field">region_facet</str>
          <str name="facet.field">era_facet</str>
          <str name="facet.field">games_duration_facet</str>
          <str name="facet.field">games_players_facet</str>
          <str name="facet.field">games_ages_facet</str>
          <str name="facet.field">subject_heading_facet</str>
          <str name="facet.field">genre_heading_facet</str>
          <str name="f.building_facet.facet.sort">index</str>
          <str name="f.access_facet.facet.sort">index</str>
          <str name="f.languages.facet.limit">11</str>
          <str name="f.author_contributor_facet.facet.limit">11</str>
          <str name="f.title_series_facet.facet.limit">11</str>
          <str name="f.shelf_facet.facet.limit">11</str>
          <str name="f.resource_type_facet.facet.sort">index</str>
          <str name="f.collection_facet.facet.sort">index</str>
          <str name="f.topic_facet.facet.limit">11</str>
          <str name="f.region_facet.facet.limit">11</str>
          <str name="f.games_duration_facet.facet.sort">index</str>
          <str name="f.era_facet.facet.limit">11</str>
          <str name="f.games_players_facet.facet.sort">index</str>
          <str name="f.shelf_facet.facet.sort">index</str>
          <str name="f.meeting_facet.facet.limit">11</str>
          <str name="f.games_ages_facet.facet.sort">index</str>
          <str name="f.media_type_facet.facet.limit">11</str>
          <str name="f.genre_facet.facet.limit">11</str>
          <str name="sort">score desc, title_sort asc</str>
          <str name="q"></str>
        </lst>
        <lst>
          <str name="qt">catalog-search</str>
          <str name="wt">json</str>
          <str name="rows">0</str>
          <str name="fq">suppressed:false</str>
          <str name="facet">true</str>
          <str name="facet.query">date_added:[NOW-7DAYS/DAY TO NOW/DAY]</str>
          <str name="facet.query">date_added:[NOW-14DAYS/DAY TO NOW/DAY]</str>
          <str name="facet.query">date_added:[NOW-21DAYS/DAY TO NOW/DAY]</str>
          <str name="facet.query">date_added:[NOW-1MONTH/DAY TO NOW/DAY]</str>
          <str name="facet.query">date_added:[NOW-2MONTHS/DAY TO NOW/DAY]</str>
          <str name="facet.query">date_added:[NOW-3MONTHS/DAY TO NOW/DAY]</str>
          <str name="facet.query">date_added:[NOW-6MONTHS/DAY TO NOW/DAY]</str>
          <str name="facet.query">publication_year_range_facet:[100 TO 199]</str>
          <str name="facet.query">publication_year_range_facet:[200 TO 399]</str>
          <str name="facet.query">publication_year_range_facet:[400 TO 599]</str>
          <str name="facet.query">publication_year_range_facet:[600 TO 799]</str>
          <str name="facet.query">publication_year_range_facet:[800 TO 999]</str>
          <str name="facet.query">publication_year_range_facet:[1000 TO 1199]</str>
          <str name="facet.query">publication_year_range_facet:[1200 TO 1399]</str>
          <str name="facet.query">publication_year_range_facet:[1400 TO 1599]</str>
          <str name="facet.query">publication_year_range_facet:[1600 TO 1799]</str>
          <str name="facet.query">publication_year_range_facet:[1800 TO 1999]</str>
          <str name="facet.query">publication_year_range_facet:[2000 TO 2026]</str>
          <str name="f.access_facet.facet.sort">index</str>
          <str name="f.languages.facet.limit">11</str>
          <str name="f.building_facet.facet.sort">index</str>
          <str name="f.author_contributor_facet.facet.limit">11</str>
          <str name="f.title_series_facet.facet.limit">11</str>
          <str name="f.shelf_facet.facet.limit">11</str>
          <str name="f.resource_type_facet.facet.sort">index</str>
          <str name="f.collection_facet.facet.sort">index</str>
          <str name="f.topic_facet.facet.limit">11</str>
          <str name="f.region_facet.facet.limit">11</str>
          <str name="f.games_duration_facet.facet.sort">index</str>
          <str name="f.era_facet.facet.limit">11</str>
          <str name="f.games_players_facet.facet.sort">index</str>
          <str name="f.shelf_facet.facet.sort">index</str>
          <str name="f.meeting_facet.facet.limit">11</str>
          <str name="f.games_ages_facet.facet.sort">index</str>
          <str name="f.media_type_facet.facet.limit">11</str>
          <str name="f.genre_facet.facet.limit">11</str>
          <str name="sort">score desc, title_sort asc</str>
          <str name="q"></str>
        </lst>
     </arr>
    </listener>

    <!-- Use Cold Searcher

         If a search request comes in and there is no current
         registered searcher, then immediately register the still
         warming searcher and use it.  If "false" then all requests
         will block until the first searcher is done warming.
      -->
    <useColdSearcher>true</useColdSearcher>

    <!-- Max Warming Searchers
         
         Maximum number of searchers that may be warming in the
         background concurrently.  An error is returned if this limit
         is exceeded.

         Recommend values of 1-2 for read-only followers, higher for
         leaders w/o cache warming.

         NOTE: Per https://solr.apache.org/guide/7_0/major-changes-in-solr-7.html, it is now
         recommended to remove maxWarmingSearchers entries from solrconfig.xml files.
      -->
    <!-- <maxWarmingSearchers>2</maxWarmingSearchers> -->

  </query>

  <!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
     Circuit Breaker Section - This section consists of configurations for
     circuit breakers
     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ -->
  <circuitBreaker class="solr.CircuitBreakerManager" enabled="false">
    <!-- Enable Circuit Breakers

    Circuit breakers are designed to allow stability and predictable query
    execution. They prevent operations that can take down the node and cause
    noisy neighbour issues.

    This flag is the uber control switch which controls the activation/deactivation of all circuit
    breakers. At the moment, the only circuit breaker (max JVM circuit breaker) does not have its
    own specific configuration. However, if a circuit breaker wishes to be independently configurable,
    they are free to add their specific configuration but need to ensure that this flag is always
    respected - this should have veto over all independent configuration flags.
    -->

    <!-- Memory Circuit Breaker Control Flag

    Use the following flag to control the behaviour of this circuit breaker
    -->
      <!-- <str name="memEnabled">true</str> -->

    <!-- Memory Circuit Breaker Threshold In Percentage

    Specific configuration for max JVM heap usage circuit breaker. This configuration defines the
    threshold percentage of maximum heap allocated beyond which queries will be rejected until the
    current JVM usage goes below the threshold. The valid value range for this parameter is 50 - 95.

    Consider a scenario where the max heap allocated is 4 GB and memoryCircuitBreakerThresholdPct is
    defined as 75. Threshold JVM usage will be 4 * 0.75 = 3 GB. Its generally a good idea to keep this value between 75 - 80% of maximum heap
    allocated.

    If, at any point, the current JVM heap usage goes above 3 GB, queries will be rejected until the heap usage goes below 3 GB again.
    If you see queries getting rejected with 503 error code, check for "Circuit Breakers tripped"
    in logs and the corresponding error message should tell you what transpired (if the failure
    was caused by tripped circuit breakers).
    -->
      <!-- <str name="memThreshold">75</str> -->

    <!-- CPU Based Circuit Breaker Control Flag

    Use the following flag to control the behaviour of this circuit breaker
    -->
      <!-- <str name="cpuEnabled">true</str> -->

    <!-- CPU Based Circuit Breaker Triggering Threshold

    The triggering threshold is defined in units of CPU utilization. The configuration to control this is as below:
    -->
      <!-- <str name="cpuThreshold">75</str> -->

  </circuitBreaker>


  <!-- Request Dispatcher

       This section contains instructions for how the SolrDispatchFilter
       should behave when processing requests for this SolrCore.

       handleSelect is a legacy option that affects the behavior of requests
       such as /select?qt=

       handleSelect="true" will cause the SolrDispatchFilter to process
       the request and dispatch the query to a handler specified by the 
       "qt" param, assuming "/select" isn't already registered.

       handleSelect="false" will cause the SolrDispatchFilter to
       ignore "/select" requests, resulting in a 404 unless a handler
       is explicitly registered with the name "/select"

       handleSelect="true" is not recommended for new users, but is the default
       for backwards compatibility
    -->
  <requestDispatcher handleSelect="true" >
    <!-- Request Parsing

         These settings indicate how Solr Requests may be parsed, and
         what restrictions may be placed on the ContentStreams from
         those requests

         enableRemoteStreaming - enables use of the stream.file
         and stream.url parameters for specifying remote streams.

         multipartUploadLimitInKB - specifies the max size (in KiB) of
         Multipart File Uploads that Solr will allow in a Request.

         formdataUploadLimitInKB - specifies the max size (in KiB) of
         form data (application/x-www-form-urlencoded) sent via
         POST. You can use POST to pass request parameters not
         fitting into the URL.

         addHttpRequestToContext - if set to true, it will instruct
         the requestParsers to include the original HttpServletRequest
         object in the context map of the SolrQueryRequest under the
         key "httpRequest". It will not be used by any of the existing
         Solr components, but may be useful when developing custom
         plugins.

         *** WARNING ***
         Before enabling remote streaming, you should make sure your
         system has authentication enabled.

    <requestParsers enableRemoteStreaming="false"
                    multipartUploadLimitInKB="-1"
                    formdataUploadLimitInKB="-1"
                    addHttpRequestToContext="false"/>
      -->

    <!-- HTTP Caching

         Set HTTP caching related parameters (for proxy caches and clients).

         The options below instruct Solr not to output any HTTP Caching
         related headers
      -->
    <httpCaching never304="true" />
    <!-- If you include a <cacheControl> directive, it will be used to
         generate a Cache-Control header (as well as an Expires header
         if the value contains "max-age=")

         By default, no Cache-Control header is generated.

         You can use the <cacheControl> option even if you have set
         never304="true"
      -->
    <!--
       <httpCaching never304="true" >
         <cacheControl>max-age=30, public</cacheControl>
       </httpCaching>
      -->
    <!-- To enable Solr to respond with automatically generated HTTP
         Caching headers, and to response to Cache Validation requests
         correctly, set the value of never304="false"

         This will cause Solr to generate Last-Modified and ETag
         headers based on the properties of the Index.

         The following options can also be specified to affect the
         values of these headers...

         lastModFrom - the default value is "openTime" which means the
         Last-Modified value (and validation against If-Modified-Since
         requests) will all be relative to when the current Searcher
         was opened.  You can change it to lastModFrom="dirLastMod" if
         you want the value to exactly correspond to when the physical
         index was last modified.

         etagSeed="..." is an option you can change to force the ETag
         header (and validation against If-None-Match requests) to be
         different even if the index has not changed (ie: when making
         significant changes to your config file)

         (lastModifiedFrom and etagSeed are both ignored if you use
         the never304="true" option)
      -->
    <!--
       <httpCaching lastModifiedFrom="openTime"
                    etagSeed="Solr">
         <cacheControl>max-age=30, public</cacheControl>
       </httpCaching>
    -->

    <!-- If we want to use this in production, here are the settings.
         (Uncomment to use.) -->

    <!--
       <httpCaching lastModifiedFrom="openTime"
                    etagSeed="Solr">
         <cacheControl>must-revalidate</cacheControl>
       </httpCaching>
      -->
  </requestDispatcher>

  <!-- Request Handlers

       http://wiki.apache.org/solr/SolrRequestHandler

       Incoming queries will be dispatched to a specific handler by name
       based on the path specified in the request.

       If a Request Handler is declared with startup="lazy", then it will
       not be initialized until the first request that uses it.

    -->
  <!-- SearchHandler

       http://wiki.apache.org/solr/SearchHandler

       For processing Search Queries, the primary Request Handler
       provided with Solr is "SearchHandler" It delegates to a sequent
       of SearchComponents (see below) and supports distributed
       queries across multiple shards
  -->

  <!-- Copying the below from our Solr 4.5 configuration -->
  <requestHandler name="standard" class="solr.SearchHandler">
     <lst name="defaults">
       <str name="echoParams">explicit</str>
       <int name="rows">10</int>
       <str name="df">text</str>
     </lst>
  </requestHandler>
 
  <!-- A request handler that returns indented JSON by default -->
  <requestHandler name="/query" class="solr.SearchHandler">
    <lst name="defaults">
      <str name="echoParams">explicit</str>
      <str name="wt">json</str>
      <str name="indent">true</str>
      <str name="df">text</str>
    </lst>
  </requestHandler>

  <!-- This is our document-get handler for Discover; it gets a document by
       ID, filters out suppressed records, and pulls back all fields. -->
  <requestHandler name="/get-discover" class="solr.SearchHandler">
     <lst name="defaults">
       <str name="omitHeader">true</str>
       <str name="wt">json</str>
       <str name="indent">true</str>
       <str name="fl">*</str>
       <str name="q">{!term f=id v=$id}</str>
       <str name="fq">suppressed:false</str>
     </lst>
   </requestHandler>

  <!-- This is our search handler for our number type searches in Discover:
       call numbers, standard numbers, control numbers.  -->
  <requestHandler name="catalog-numtype-search" class="solr.SearchHandler">
    <lst name="defaults">
      <str name="q">*:*</str>
      <str name="echoParams">explicit</str>
      <str name="fl">
         id, 
         score,
         date_added,
         author_json,
         contributors_json,
         isbn_numbers,
         oclc_numbers,
         sudocs_display,
         call_numbers_display,
         all_standard_numbers,
         all_control_numbers,
         languages,
         main_call_number,
         resource_type,
         publication_year_display,
         publication_display,
         creation_display,
         distribution_display,
         manufacture_display,
         copyright_display,
         title_display,
         non_truncated_title_display,
         thumbnail_url,
         urls_json,
         items_json,
         has_more_items
       </str>
       <str name="facet.mincount">1</str>
    </lst>
  </requestHandler>

  <!-- This is our main search handler for Discover searches. -->
  <requestHandler name="catalog-search" class="solr.SearchHandler">
    <!-- default values for query parameters can be specified, these
         will be overridden by parameters in the request
      -->
     <lst name="defaults">
       <str name="defType">dismax</str>
       <str name="echoParams">explicit</str>
       <int name="rows">10</int>
 
       <str name="q.alt">*:*</str>
       <str name="mm">2&lt;-1 5&lt;-2 6&lt;90%</str>
 
       <str name="qf">
         type_format_search^1000
         publication_dates_search^1000
         building_collection_search^800
         main_title_search^600
         all_title_variants_search^550
         author_search^500
         contributors_search^475
         responsibility_search^450
         editions_search^450
         genres_search_main_terms^450
         genres_search_all_terms^300
         subjects_search_main_terms^400
         subjects_search_all_terms^250
         genres_search_exact_headings^100
         subjects_search_exact_headings^100
         related_work_titles_search^99
         meetings_search^99
         sudocs_search^20
         toc_notes^10
         call_numbers_search
         standard_numbers_search
         control_numbers_search
         notes_search
         publishers_search
         publication_places_search
       </str>
       <str name="pf">
         main_title_search^10000
         all_title_variants_search^6000
         author_search^5500
         contributors_search^4500
         editions_search^4500
         genres_search_main_terms^4000
         subjects_search_main_terms^3000
         genres_search_all_terms^2500
         subjects_search_all_terms^1500
         genres_search_exact_headings^4500
         subjects_search_exact_headings^3500
         meetings_search^1099
         responsibility_search^1099
         publishers_search^1001
         type_format_search^1001
         building_collection_search^1001
         toc_notes^1001
       </str>
       <!--<str name="bq">_query_:"{!dismax v=$user_query mm='100%' bq='' ps=0}"^1000</str>-->
       <str name="bf">record_boost^500</str>

       <str name="creator_qf">
         author_search^1000
         contributors_search^750
         responsibility_search^700
       </str>
       <str name="creator_pf">
         author_search^10000
         contributors_search^8000
         responsibility_search^1099
       </str>
       <!--<str name="creator_bq">_query_:"{!dismax v=$user_query mm='100%' bq='' ps=0 qf=$creator_qf pf=$creator_pf}"^1000</str>-->
       
       <str name="title_qf">
         publication_dates_search^1000
         main_title_search^1000
         all_title_variants_search^700
         editions_search^450
         related_work_titles_search^200
         toc_notes^10
       </str>
       <str name="title_pf">
         main_title_search^10000
         all_title_variants_search^5500
         editions_search^4500
         related_work_titles_search^1001
         toc_notes^1001
       </str>
       <!--<str name="title_bq">_query_:"{!dismax v=$user_query mm='100%' bq='' ps=0 qf=$title_qf pf=$title_pf}"^1000</str>-->
       
       <str name="subject_qf">
         subjects_search_main_terms^1000
         subjects_search_all_terms^700
         subjects_search_exact_headings^650
       </str>
       <str name="subject_pf">
         subjects_search_exact_headings^10000
         subjects_search_main_terms^7000
         subjects_search_all_terms^6000
       </str>
       <!--<str name="subject_bq">_query_:"{!dismax v=$user_query mm='100%' bq='' ps=0 qf=$subject_qf pf=$subject_pf}"^1000</str>-->
       
       <str name="genre_qf">
         genres_search_main_terms^1000
         genres_search_all_terms^700
         genres_search_exact_headings^650
       </str>
       <str name="genre_pf">
         genres_search_exact_headings^10000
         genres_search_main_terms^7000
         genres_search_all_terms^6000
       </str>
       <!--<str name="genre_bq">_query_:"{!dismax v=$user_query mm='100%' bq='' ps=0 qf=$genre_qf pf=$genre_pf}"^1000</str>-->
       
       <str name="cn_qf">
         call_numbers_search^1000
       </str>
       <str name="cn_pf">
         call_numbers_search^10000
       </str>
       <str name="sudoc_qf">
         sudocs_search^1000
       </str>
       <str name="sudoc_pf">
         sudocs_search^10000
       </str>
       <str name="snum_qf">
         standard_numbers_search^1000
       </str>
       <str name="snum_pf">
         standard_numbers_search^10000
       </str>
       <str name="cnum_qf">
         control_numbers_search^1000
       </str>
       <str name="cnum_pf">
         control_numbers_search^10000
       </str>
        
       <int name="ps">10</int>
       <!--<int name="ps">3</int>-->
       <float name="tie">0.01</float>
 
       <str name="fl">
         id, 
         score,
         date_added,
         author_json,
         contributors_json,
         isbn_numbers,
         oclc_numbers,
         sudocs_display,
         call_numbers_display,
         all_standard_numbers,
         all_control_numbers,
         main_call_number,
         resource_type,
         publication_year_display,
         publication_display,
         creation_display,
         distribution_display,
         manufacture_display,
         copyright_display,
         title_display,
         non_truncated_title_display,
         thumbnail_url,
         urls_json,
         items_json,
         has_more_items
       </str>

       <str name="facet.mincount">1</str>
 
       <!-- <str name="facet">true</str>
       <str name="facet.field">material_type</str>
       <str name="facet.field">formats</str>
       <str name="facet.field">main_call_number</str>
       <str name="facet.field">languages</str>
       <str name="facet.field">publication_dates_facet</str>
       <str name="facet.field">genre_terms_facet</str>
       <str name="facet.field">topic_terms_facet</str>
       <str name="facet.field">geographic_terms_facet</str>
       <str name="facet.field">era_terms_facet</str>
       <str name="facet.field">form_terms_facet</str>
       <str name="facet.field">people_facet</str>
       <str name="facet.field">corporations_facet</str>
       <str name="facet.field">meetings_facet</str> -->
        
       <str name="spellcheck">false</str>
       <!--
       <str name="spellcheck.dictionary">default</str>
       <str name="spellcheck.onlyMorePopular">true</str>
       <str name="spellcheck.extendedResults">true</str>
       <str name="spellcheck.collate">false</str>
       <str name="spellcheck.count">5</str>
     -->
 
     </lst>
    <!-- In addition to defaults, "appends" params can be specified
         to identify values which should be appended to the list of
         multi-val params from the query (or the existing "defaults").
      -->
    <!-- In this example, the param "fq=instock:true" would be appended to
         any query time fq params the user may specify, as a mechanism for
         partitioning the index, independent of any user selected filtering
         that may also be desired (perhaps as a result of faceted searching).
 
         NOTE: there is *absolutely* nothing a client can do to prevent these
         "appends" values from being used, so don't use this mechanism
         unless you are sure you always want it.
      -->
    <!--
       <lst name="appends">
         <str name="fq">inStock:true</str>
       </lst>
      -->
    <!-- "invariants" are a way of letting the Solr maintainer lock down
         the options available to Solr clients.  Any params values
         specified here are used regardless of what values may be specified
         in either the query, the "defaults", or the "appends" params.
 
         In this example, the facet.field and facet.query params would
         be fixed, limiting the facets clients can use.  Faceting is
         not turned on by default - but if the client does specify
         facet=true in the request, these are the only facets they
         will be able to see counts for; regardless of what other
         facet.field or facet.query params they may specify.
 
         NOTE: there is *absolutely* nothing a client can do to prevent these
         "invariants" values from being used, so don't use this mechanism
         unless you are sure you always want it.
      -->
    <!--
       <lst name="invariants">
         <str name="facet.field">cat</str>
         <str name="facet.field">manu_exact</str>
         <str name="facet.query">price:[* TO 500]</str>
         <str name="facet.query">price:[500 TO *]</str>
       </lst>
      -->
    <!-- If the default list of SearchComponents is not desired, that
         list can either be overridden completely, or components can be
         prepended or appended to the default list.  (see below)
      -->
    <!--
       <arr name="components">
         <str>nameOfCustomComponent1</str>
         <str>nameOfCustomComponent2</str>
       </arr>
      -->
    <!-- 
      <arr name="last-components">
        <str>spellcheck</str>
      </arr>
    -->

  </requestHandler>

  <!-- Solr Replication

       The SolrReplicationHandler supports replicating indexes from a
       "leader" used for indexing and "followers" used for queries.

  -->

  <!-- ### UNTL CONFIG NOTE ###

    We use replication in production but not staging or development.
    The below ReplicationHandler definitions are here to configure
    replication in production.

    For production nodes, we simply uncomment the appropriate block
    for each leader and follower, and we add the "leaderUrl" for
    followers. (This happens automatically via Ansible.) The settings
    that appear here are otherwise untouched. So you can make changes
    here and redeploy to get them into production.
    
  -->

  <!-- Replication Leader config  -->
  <!--
    <requestHandler name="/replication" class="solr.ReplicationHandler">
      <lst name="leader">
        <str name="replicateAfter">commit</str>
      </lst>
      <int name="maxNumberOfBackups">2</int>
      <lst name="invariants">
        <str name="maxWriteMBPerSec">16</str>
      </lst>
    </requestHandler>
  -->

  <!-- Replication Follower config -->
  <!--
    <requestHandler name="/replication" class="solr.ReplicationHandler">
      <lst name="follower">
        <str name="leaderUrl"></str>
      </lst>
    </requestHandler>
  -->

  <!-- Search Components

       Search components are registered to SolrCore and used by
       instances of SearchHandler (which can access them by name)

       By default, the following components are available:

       <searchComponent name="query"     class="solr.QueryComponent" />
       <searchComponent name="facet"     class="solr.FacetComponent" />
       <searchComponent name="mlt"       class="solr.MoreLikeThisComponent" />
       <searchComponent name="highlight" class="solr.HighlightComponent" />
       <searchComponent name="stats"     class="solr.StatsComponent" />
       <searchComponent name="debug"     class="solr.DebugComponent" />

       Default configuration in a requestHandler would look like:

       <arr name="components">
         <str>query</str>
         <str>facet</str>
         <str>mlt</str>
         <str>highlight</str>
         <str>stats</str>
         <str>debug</str>
       </arr>

       If you register a searchComponent to one of the standard names,
       that will be used instead of the default.

       To insert components before or after the 'standard' components, use:

       <arr name="first-components">
         <str>myFirstComponentName</str>
       </arr>

       <arr name="last-components">
         <str>myLastComponentName</str>
       </arr>

       NOTE: The component registered with the name "debug" will
       always be executed after the "last-components"

     -->

  <!-- Spell Check components removed -->

  <!-- Example / Demonstration components removed -->

  <!-- Highlighting components removed -->

  <!-- Update Processors removed -->

  <!-- Response Writers

       http://wiki.apache.org/solr/QueryResponseWriter

       Request responses will be written using the writer specified by
       the 'wt' request parameter matching the name of a registered
       writer.

       The "default" writer is the default and will be used if 'wt' is
       not specified in the request.
    -->
  <!-- The following response writers are implicitly configured unless
       overridden...
    -->
  <!--
     <queryResponseWriter name="xml"
                          default="true"
                          class="solr.XMLResponseWriter" />
     <queryResponseWriter name="json" class="solr.JSONResponseWriter"/>
     <queryResponseWriter name="python" class="solr.PythonResponseWriter"/>
     <queryResponseWriter name="ruby" class="solr.RubyResponseWriter"/>
     <queryResponseWriter name="php" class="solr.PHPResponseWriter"/>
     <queryResponseWriter name="phps" class="solr.PHPSerializedResponseWriter"/>
     <queryResponseWriter name="csv" class="solr.CSVResponseWriter"/>
     <queryResponseWriter name="schema.xml" class="solr.SchemaXmlResponseWriter"/>
    -->

  <!-- WE SHOULD REMOVE THIS NEXT PART
       The json-with-plain-text-content-type *is* currently still set in our
       production 4.5 config for discover cores, but it's something we should
       probably remove. We probably want to use the correct MIME type for JSON
       content.
  --> 
  <queryResponseWriter name="json" class="solr.JSONResponseWriter">
    <!-- For the purposes of the tutorial, JSON responses are written as
     plain text so that they are easy to read in *any* browser.
     If you expect a MIME type of "application/json" just remove this override.
    -->
    <str name="content-type">text/plain; charset=UTF-8</str>
  </queryResponseWriter>

  <!-- Removed other queryResponseWriter definitions -->

  <!-- Query Parsers remove -->

  <!-- Function Parsers removed -->

  <!-- Document Transformers removed -->

</config>
